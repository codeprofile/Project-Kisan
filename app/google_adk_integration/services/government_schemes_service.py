from typing import Dict, Any, Optional
import logging
import os

logger = logging.getLogger(__name__)



# Initialize Gemini client
try:
    import google.generativeai as genai

    api_key = os.getenv("GOOGLE_API_KEY")
    if api_key:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        logger.info("тЬЕ Google GenerativeAI client initialized for Government Schemes")
    else:
        model = None
        logger.warning("тЭМ GOOGLE_AI_API_KEY not found for schemes service")

except ImportError:
    model = None
    logger.error("тЭМ google-generativeai not installed")

except Exception as e:
    model = None
    logger.error(f"тЭМ Failed to initialize AI client for schemes: {e}")


class GovernmentSchemesService:
    """AI-powered service for government schemes navigation and assistance"""

    def __init__(self):
        self.model = model

    async def search_schemes(
            self,
            query: str,
            state: Optional[str] = None,
            scheme_type: str = "all",
            farmer_category: Optional[str] = None
    ) -> Dict[str, Any]:
        """Search for relevant government schemes using AI"""
        try:
            if not self.model:
                return {
                    "status": "error",
                    "message": "AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ GOOGLE_AI_API_KEY рд╕реЗрдЯ рдХрд░реЗрдВред"
                }

            # Create comprehensive search prompt
            search_prompt = f"""
            рдЖрдк рдПрдХ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВред рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рди рдХреА рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЖрд╡рд╢реНрдпрдХрддрд╛ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреЗрдВ:

            рдХрд┐рд╕рд╛рди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛: {query}
            рд░рд╛рдЬреНрдп: {state or 'рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд░рд╛рдЬреНрдп рдирд╣реАрдВ'}
            рдпреЛрдЬрдирд╛ рдкреНрд░рдХрд╛рд░: {scheme_type}
            рдХрд┐рд╕рд╛рди рд╢реНрд░реЗрдгреА: {farmer_category or 'рд╕рд╛рдорд╛рдиреНрдп'}

            рдХреГрдкрдпрд╛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ:

            1. **рдореБрдЦреНрдп рдпреЛрдЬрдирд╛рдПрдВ** (рдХреЗрдВрджреНрд░ рд╕рд░рдХрд╛рд░):
               - рдпреЛрдЬрдирд╛ рдХрд╛ рдирд╛рдо
               - рдореБрдЦреНрдп рд▓рд╛рдн
               - рд╕рдмреНрд╕рд┐рдбреА рд░рд╛рд╢рд┐/рдкреНрд░рддрд┐рд╢рдд
               - рдмреБрдирд┐рдпрд╛рджреА рдкрд╛рддреНрд░рддрд╛

            2. **рд░рд╛рдЬреНрдп рд╕рд░рдХрд╛рд░ рдХреА рдпреЛрдЬрдирд╛рдПрдВ** (рдпрджрд┐ state рджреА рдЧрдИ рд╣реИ):
               - рд░рд╛рдЬреНрдп-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдпреЛрдЬрдирд╛рдПрдВ
               - рд╕реНрдерд╛рдиреАрдп рд▓рд╛рдн

            3. **рдЕрддрд┐рд░рд┐рдХреНрдд рд╡рд┐рдХрд▓реНрдк**:
               - рдмреИрдВрдХ рд▓реЛрди schemes
               - Private company schemes
               - NGO programs

            4. **рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕реБрдЭрд╛рд╡**:
               - рдХреМрди рд╕реА рдпреЛрдЬрдирд╛ рд╕рдмрд╕реЗ рдмреЗрд╣рддрд░ рд╣реИ
               - рдЖрд╡реЗрджрди рдХреА рдкреНрд░рд╛рдердорд┐рдХрддрд╛
               - рд╕рд╛рдорд╛рдиреНрдп tips

            рдЬрд╛рдирдХрд╛рд░реА рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреЗрдВ рдФрд░ рд╡рд░реНрддрдорд╛рди (2024-25) рдпреЛрдЬрдирд╛рдУрдВ рдкрд░ рдлреЛрдХрд╕ рдХрд░реЗрдВред
            """

            # Call AI for scheme search
            response = self.model.generate_content(search_prompt)
            search_text = response.text

            return {
                "status": "success",
                "query": query,
                "state": state,
                "ai_response": search_text
            }

        except Exception as e:
            logger.error(f"Scheme search error: {e}")
            return {
                "status": "error",
                "message": f"рдпреЛрдЬрдирд╛ рдЦреЛрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}"
            }

    async def get_scheme_details(
            self,
            scheme_name: str,
            state: Optional[str] = None,
            include_application_info: bool = True
    ) -> Dict[str, Any]:
        """Get detailed information about a specific scheme"""
        try:
            if not self.model:
                return {
                    "status": "error",
                    "message": "AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
                }

            # Create detailed information prompt
            details_prompt = f"""
            рдХреГрдкрдпрд╛ '{scheme_name}' рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ:

            рд░рд╛рдЬреНрдп: {state or 'рдкреВрд░реЗ рднрд╛рд░рдд рдХреЗ рд▓рд┐рдП'}
            рдЖрд╡реЗрджрди рдЬрд╛рдирдХрд╛рд░реА рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ: {'рд╣рд╛рдВ' if include_application_info else 'рдирд╣реАрдВ'}

            рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╡рд┐рд╡рд░рдг рдЪрд╛рд╣рд┐рдП:

            1. **рдпреЛрдЬрдирд╛ рдХрд╛ рдкреВрд░рд╛ рдирд╛рдо рдФрд░ рдЙрджреНрджреЗрд╢реНрдп**

            2. **рдореБрдЦреНрдп рд▓рд╛рдн рдФрд░ рд╕реБрд╡рд┐рдзрд╛рдПрдВ**:
               - рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛ рдХреА рд░рд╛рд╢рд┐
               - рд╕рдмреНрд╕рд┐рдбреА рдХрд╛ рдкреНрд░рддрд┐рд╢рдд
               - рдЕрдиреНрдп рд▓рд╛рдн

            3. **рдкрд╛рддреНрд░рддрд╛ рдорд╛рдирджрдВрдб**:
               - рдЖрдп рд╕реАрдорд╛
               - рднреВрдорд┐ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛
               - рдЖрдпреБ рд╕реАрдорд╛
               - рд╢реНрд░реЗрдгреА рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ

            4. **рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝**

            5. **рдпреЛрдЬрдирд╛ рдХреА рдЕрд╡рдзрд┐ рдФрд░ deadline**

            {'6. **рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛**: - рдСрдирд▓рд╛рдЗрди/рдСрдлрд▓рд╛рдЗрди рдкреНрд░рдХреНрд░рд┐рдпрд╛ - рдЖрд╡реЗрджрди рдХреЗ рдЪрд░рдг - рдорд╣рддреНрд╡рдкреВрд░реНрдг рд▓рд┐рдВрдХ' if include_application_info else ''}

            7. **рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА**:
               - рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдирдВрдмрд░
               - рдСрдлрд┐рд╢рд┐рдпрд▓ рд╡реЗрдмрд╕рд╛рдЗрдЯ
               - рд╕реНрдерд╛рдиреАрдп рдХрд╛рд░реНрдпрд╛рд▓рдп

            8. **рдорд╣рддреНрд╡рдкреВрд░реНрдг рдмрд╛рддреЗрдВ рдФрд░ рд╕реБрдЭрд╛рд╡**

            рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╕рдЯреАрдХ, current рдФрд░ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред
            """

            # Call AI for scheme details
            response = self.model.generate_content(details_prompt)
            details_text = response.text

            return {
                "status": "success",
                "scheme_name": scheme_name,
                "state": state,
                "ai_response": details_text
            }

        except Exception as e:
            logger.error(f"Scheme details error: {e}")
            return {
                "status": "error",
                "message": f"рдпреЛрдЬрдирд╛ рд╡рд┐рд╡рд░рдг рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}"
            }

    async def check_eligibility(
            self,
            scheme_name: str,
            farmer_profile: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Check farmer's eligibility for a scheme using AI analysis"""
        try:
            if not self.model:
                return {
                    "status": "error",
                    "message": "AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
                }

            # Create eligibility check prompt
            eligibility_prompt = f"""
            рдХреГрдкрдпрд╛ '{scheme_name}' рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдХрд┐рд╕рд╛рди рдХреА рдкрд╛рддреНрд░рддрд╛ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ:

            рдХрд┐рд╕рд╛рди рдХрд╛ рд╡рд┐рд╡рд░рдг:
            - рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░: {farmer_profile.get('land_size', 'рдЕрдЬреНрдЮрд╛рдд')} рдПрдХрдбрд╝
            - рд╡рд╛рд░реНрд╖рд┐рдХ рдЖрдп: тВ╣{farmer_profile.get('annual_income', 'рдЕрдЬреНрдЮрд╛рдд')}
            - рд╢реНрд░реЗрдгреА: {farmer_profile.get('category', 'рд╕рд╛рдорд╛рдиреНрдп')}
            - рдЖрдпреБ: {farmer_profile.get('age', 'рдЕрдЬреНрдЮрд╛рдд')} рд╡рд░реНрд╖
            - рд░рд╛рдЬреНрдп: {farmer_profile.get('state', 'рдЕрдЬреНрдЮрд╛рдд')}
            - рдорд╣рд┐рд▓рд╛ рдХрд┐рд╕рд╛рди: {'рд╣рд╛рдВ' if farmer_profile.get('is_female') else 'рдирд╣реАрдВ'}
            - рдореМрдЬреВрджрд╛ рдпреЛрдЬрдирд╛рдПрдВ: {farmer_profile.get('existing_schemes', [])}

            рдХреГрдкрдпрд╛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ:

            1. **рдкрд╛рддреНрд░рддрд╛ рд╕реНрдерд┐рддрд┐**: тЬЕ рдкрд╛рддреНрд░ / тЭМ рдЕрдкрд╛рддреНрд░ / ЁЯФД рдЖрдВрд╢рд┐рдХ рдкрд╛рддреНрд░

            2. **рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг**:
               - рдХреМрди рд╕реА рд╢рд░реНрддреЗрдВ рдкреВрд░реА рд╣реЛ рд░рд╣реА рд╣реИрдВ
               - рдХреМрди рд╕реА рд╢рд░реНрддреЗрдВ рдирд╣реАрдВ рдорд┐рд▓ рд░рд╣реАрдВ
               - рдХреНрдпрд╛ рд╕реБрдзрд╛рд░ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИ

            3. **рд╕реБрдЭрд╛рд╡**:
               - рдкрд╛рддреНрд░рддрд╛ рдмрдврд╝рд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ
               - рд╡реИрдХрд▓реНрдкрд┐рдХ рдпреЛрдЬрдирд╛рдПрдВ
               - рдЖрд╡рд╢реНрдпрдХ рдХрд╛рд░реНрд░рд╡рд╛рдИ

            4. **рдЕрдЧрд▓реЗ рдХрджрдо**:
               - рддреБрд░рдВрдд рдХреНрдпрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП
               - рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рддреИрдпрд╛рд░ рдХрд░рдирд╛
               - рдЖрд╡реЗрджрди рдХреА timing

            рд╕реНрдкрд╖реНрдЯ рдФрд░ actionable рд╕рд▓рд╛рд╣ рджреЗрдВред
            """

            # Call AI for eligibility check
            response = self.model.generate_content(eligibility_prompt)
            eligibility_text = response.text

            return {
                "status": "success",
                "scheme_name": scheme_name,
                "farmer_profile": farmer_profile,
                "ai_response": eligibility_text
            }

        except Exception as e:
            logger.error(f"Eligibility check error: {e}")
            return {
                "status": "error",
                "message": f"рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}"
            }

    async def get_application_process(
            self,
            scheme_name: str,
            state: Optional[str] = None,
            application_type: str = "online"
    ) -> Dict[str, Any]:
        """Get step-by-step application process"""
        try:
            if not self.model:
                return {
                    "status": "error",
                    "message": "AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
                }

            # Create application process prompt
            process_prompt = f"""
            рдХреГрдкрдпрд╛ '{scheme_name}' рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП {application_type} рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдмрддрд╛рдПрдВ:

            рд░рд╛рдЬреНрдп: {state or 'рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдХреНрд░рд┐рдпрд╛'}

            рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП:

            1. **рдЖрд╡реЗрджрди рд╕реЗ рдкрд╣рд▓реЗ рдХреА рддреИрдпрд╛рд░реА**:
               - рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреА рдкреВрд░реА рд╕реВрдЪреА
               - рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреИрд╕реЗ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
               - рдлреЛрдЯреЛ/scan рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ

            2. **рдЪрд░рдгрдмрджреНрдз рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛**:
               {'- рдСрдирд▓рд╛рдЗрди portal рдХреА рдЬрд╛рдирдХрд╛рд░реА - Registration process - Form рднрд░рдиреЗ рдХреА рд╡рд┐рдзрд┐ - Document upload рдХрд░рдирд╛' if application_type == 'online' else ''}
               {'- рдХреМрди рд╕реЗ рдХрд╛рд░реНрдпрд╛рд▓рдп рдореЗрдВ рдЬрд╛рдирд╛ рд╣реИ - рдХрд┐рд╕рд╕реЗ рдорд┐рд▓рдирд╛ рд╣реИ - рдХреНрдпрд╛ documents рд▓реЗ рдЬрд╛рдирд╛ рд╣реИ' if application_type == 'offline' else ''}

            3. **рдорд╣рддреНрд╡рдкреВрд░реНрдг рд▓рд┐рдВрдХ рдФрд░ рд╕рдВрдкрд░реНрдХ**:
               - Official website
               - Direct application links
               - Helpline numbers
               - Office addresses

            4. **Application рдХреЗ рдмрд╛рдж**:
               - рдХрд┐рддрдиреЗ рджрд┐рди рдореЗрдВ response рдорд┐рд▓реЗрдЧрд╛
               - Status рдХреИрд╕реЗ check рдХрд░реЗрдВ
               - Problem рд╣реЛрдиреЗ рдкрд░ рдХреНрдпрд╛ рдХрд░реЗрдВ

            5. **Common Mistakes рдФрд░ Tips**:
               - рдЧрд▓рддрд┐рдпреЛрдВ рд╕реЗ рдХреИрд╕реЗ рдмрдЪреЗрдВ
               - Success rate рдмрдврд╝рд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ

            рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдФрд░ step-by-step guidance рджреЗрдВред
            """

            # Call AI for application process
            response = self.model.generate_content(process_prompt)
            process_text = response.text

            return {
                "status": "success",
                "scheme_name": scheme_name,
                "application_type": application_type,
                "ai_response": process_text
            }

        except Exception as e:
            logger.error(f"Application process error: {e}")
            return {
                "status": "error",
                "message": f"рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}"
            }

    def get_service_status(self) -> Dict[str, Any]:
        """Get service status"""
        return {
            "service_available": self.model is not None,
            "ai_model": "gemini-2.0-flash-exp" if self.model else None,
            "api_configured": os.getenv("GOOGLE_AI_API_KEY") is not None,
            "approach": "Pure AI-driven government schemes assistance",
            "capabilities": [
                "Real-time scheme search using AI knowledge",
                "Dynamic eligibility assessment",
                "Current application process guidance",
                "AI-powered office location assistance",
                "Latest updates from AI knowledge base"
            ] if self.model else [],
            "data_source": "AI knowledge base - no hardcoded data"
        }

